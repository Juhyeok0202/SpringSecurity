JWT = Json Web Token
⭐중요ㅣ 왜 사요? 어디에 쓰는지!

세션 돌이켜보기>>
user가 Web Browser 키고, www.naver.com 서버에 요청
서버는 해당 주소에 맞는 컨트롤러의 메서드를 찾음
그 메서드에서 이 page에 맞는 .html파일을 리턴해줌. 이때, Header에 세션Id를 쿠키로 줌. 웹 브라우저에 쿠키 스토리지에 세션 ID 담김(최초 요청 시 만들어짐)
두 번째 요청에는 이 세션 ID를 가지고 감.

세션 ID 역할? 무상태성인 서버를 위한 출입증과 같은 역할
1. 최초 요청 시, 서버는 목록에다가 세션id 만들어주고 이것을 .html을 던져줄 때 헤더에 담아 넘겨줌.
2. 웹 브라우저 내부에 세션id(쿠키)를 지니고 있다가, 2번째 요청 시 해당 세션id를 들고가서 서버가 자신의 스토리지와 비교함
언제 사라져?
1. 서버 쪽에서 session 값을 강제로 지워버림
2. 사용자가 브라우저 종료시킬 때, 브라우저에 있는 세션값이 날라감. (서버에는 남아있음:서버에 남은건 특정 시간 약 30분이 지나면 사라짐)
3. 시간 30분 ! 이 지나면 세션 값이 서버 쪽에서 사라짐.

세션: 로그인 요청 시(인증 시) 많이 사용 됨.

1. 클라이언트 요청 -------req----> 2.서버는 세션 스토리지에 세션id:1234 하나 만듬. 그리고 그 세션 아이디만의 저장소가 생김
   4.클라이언트쪽 웹 브라우저에 세션ID:1234가 저장됨 <------3.header: 세션 ID:1234------  서버
   5. 클라이언트의 로그인 요청 -------------username,password-------> 6.서버는 DB에 해당 값 맞는지 확인. 정상이면 7. 그 사람의 유저 정보를 DB에서 불러와 저장
   7.메인 페이지로 리턴 해줌 .html

   그 다음 부터 유저 정보 요청 시, 서버는 세션이 있는지 확인한다.
   거기에 값이 있는지 보고

   ☠️세션의 단점!?
   -클라이언트가 서버에 요청을 할 때, 클라이언트 100만 명과 같이 엄청나게 많으면 서버에 부하가 걸릴 수 있음
   하지만, 서버를 더 만들어서 Load balancing하여 서버 부하를 줄이면 됨.
    !!!!하지만!!!!!!! 로드밸런싱으로 인해, A라는 user가 서버_a에서 로그인 했었다가 서버_b에서로그인 하면 세션 값 비교 불가능
    이렇게 되면 안되니까, 방법이 존재하긴 함. 귀찮은 짓임. 그 중에서 HDD I/O는 느리니 메모리 공유 서버를 사용하면 되는데, 대표적으로 Redis서버가 있다.

⭐⭐⭐⭐⭐⭐⭐JWT는 세션의 문제점을 다 해결할 수 있음.(세션으 본질적인 문제를 해결 가능)
