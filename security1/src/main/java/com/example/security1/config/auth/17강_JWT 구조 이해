JWT

JSON 객체로 안전하게 어떠한 정보를 전송하기 위한 방식
이 정보는 디지털 서명이 되어 있으므로 신뢰할 수 있다. 서명의 용도로쓴다!!

JWT는 HMAC 혹은 RSA 방식 사용

JWT를 암호화하여 당사자간에 비밀을 제공 할 수도 있지만,
이 JWT의 핵심⭐ 서명된 토큰에 중점을 둔다.
내가 만든 JWT이 내가 쓴게 맞아! 라는 서명이 용도로 사용

그 서명된 토큰은 그 안에 어떠한 정보가 있는데,
이 정보의 무결성을 확인할 수 있게 해준다.

JWT은 언제 사용합니까??


구조: xxxxx,yyyyy,zzzzz 로 이루어짐
xxxxxx: Header
yyyyy: Payload(어떠한 정보를 의미함)
zzzzz: signature (서명)

헤더 부분에는 다음이 있다
{
    "alg": "HS256"  //알고리즘을 무엇을 사용하였는지,
    "typ" : "JWT" // 타입이 JWT이다.
} // 이 때 JSON은 Base64Url로 인코딩 되어 있다.(암호화를 하고 복호화를 할 수 있는 암호임.)
스프링 시큐리티하면서 비밀번호 암호화를 했었다.
이건 해싱이 되므로 복호화가 안됨. 찾지 위해서는 비밀번호 초기화 뿐.(해쉬)
Base64는 암호화를 하고 디코딩하여 복호화할 수 있음

PayLoad 부분에는 다음이 있다.(어떠한 정보들을 담을 수 있음)
이 정보는 클레임을 가지고 있다
1.등록된 클레임
:꼭 필수는 아니지만, 권장되는 클레임 집합
발행자, 만료시간, 주제, 청중 ~~ 사실안넣어도 됨

2.개인 클레임
:우리는 개인 클레임을 넣어서 이 개인 클레임에 userId같은 것을 넣을 예정
Jwt에 우리 user 정보에 필요한 어떤 공개 되도 되지만, 그 유저를 특정할 수 있는 pk를 넣어 줄 예정

서명(Signature) 부분에는 다음이 있다.

HMACSHA256(
  base64UrlEncode(header) + "." + //우리가 만들었던 헤더와
  base64UrlEncode(payload),         //우리가 만들었던 payload(정보)랑
  secret)                           //나만 알고 있는 개인키

위 내용을 HS256(HMACSHA256)으로 암호화를 한다.

secret은 서버만 알고있는 키.
----------------------

클라이언트와 서버가 있따.
클라이언트가 로그인 하기 위해서 id,password를 서버에게 전송을 함
서버가 header, payload, signature만든다.
header      -> HS256
payload     -> {
    "username" : "ssar"
}
signature   -> header + payload +(서버만 알고있는 키값)cos 이 정보를 HS256으로 암호화함.

 *HS256이라는 것은 정확히 HMAC이라는 방식으로 [SHA255으로 암호화 -> 해쉬하는 것] (복호화 할 수 없는 키값을 만드는 것)
 이때, HMAC은 "시크릿 키를 포함한 암호화방식"
 HS256을 풀어 보면
 H: HMAC :"시크릿 키를 포함한"
 S256 : SHA256 : "SHA256 암호화(해쉬)"

 아무튼 결국 header 와 payload 그리고 signature 각각 Base64로 인코딩한다.

 이것을 클라이언트에게 돌려줌!!!
 (로그인 시도를 하고 인증이 완료가 되면 jwt을 만드는 것)
 (이 토큰은 만들어 돌려줄 때, 생긴게 이상한 난수처럼 보일거야.)

 클라이언트는 보통 웹브라우저에 로컬스토리지 같은 영역에 받은 JWT를 넣어둠.
 (개발자 도구(F12)에서 로컬 스토리지 정보 볼 수 있으니, 궁금하면 보자)

 저장을 해놓았다가 클라이언트가 서버에 개인정보를 요청할 때 jwt을 같이 전송
 그럼 서버는 jwt이 신뢰할 수 있는 토큰인지 검증 과정 필요.
 어떻게 검증? signature에 HS256으로 암호화된 정보를 ABC5라고 하자.
 이 ABC5란 정보를 받았는데, 이 서버가 무엇을 해야 하냐면
 서버는 header,payload,signature 모두 알 수 있는데 여기서 중요한 것은!!
 이 안에 있는 데이터가 무엇인지 아는 것이 아니라!!
 이 jwt가 유효한 토큰인지 확인하는 것이 중요!!⭐⭐
 그래서 어떻게 하냐면?
 넘겨받은 header+payload와 서버 자신이 가지고 있는 secret Key가지고 똑같이
 HS256으로 암호화를 진행하여 클라이언트에게 받은 jwt와 같이 ABC5면
 애는 이전에 온 애가 맞아! 로그인 했던 애가 맞아! 라고 인증을 할 수 있다.

 인증이 되고 나서(인증만 하면 뭐해) 개인정보는 어떻게 알 수 있냐면,
 PayLoad에 username : ssar 있잖아. 이걸로 DB에 select해서 돌려줍니다.

*서버는 원래 세션을 만들었는데, 이제는 세션이 아닌 jwt을 만들어줌.

----
아까 전에 보면 jwt에는
Header, Payload, Signature가 있었잖아
Signature는 Header+Payload+Secret 으로 HS256으로 암호화함.
여기서 HS256을 사용안하고 RSA를 사용한다면!!
서버가 어떻게 하냐면,
Header에 RSA 적어주고
Payload에는 username : ssar
Signatures는 Secret 필요가 없이 header와 payload만 필요 더 자세히
RSA에서는 공개키,개인키가 있으면, 서버가 header 와 payload 를 서버 개인키로 잠궈서
signature를 만들고 이 만들어진 토큰을 클라이언트에게 돌려준다.

클라이언트가 서버쪽으로 다시 요청을 할 때,
클라이언트가 던진 jwt를 검증할 때 서버는 무슨 일만 하면 되냐면,
검증 시 공개키로 Signature로 서명을 검증하기만 하면 된다.

RSA로 해도 되고, HS256으로 사용 해도 되긴하는데 HS256을 더 많이 사용하는 추세



